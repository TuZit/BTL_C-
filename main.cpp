#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <ctime>
#include <cstdlib>
#include "cotp.hpp"

const int MAX_USERS = 100;
using namespace std;

void example()
{
    // Create an OTP object
    char base32_secret[] = "JBSWY3DPEHPK3PXP";      // Base32 encoded secret key
    OTPData *data = nullptr;                        // Use OTPData directly
    COTP::OTP otp(data, base32_secret, nullptr, 6); // Use nullptr for default SHA1 algorithm

    // Generate an OTP
    char output[7]; // 6 digits + null terminator
    otp.generate(time(nullptr), output);
    std::cout << "Generated OTP: " << output << std::endl;
}

// Lớp User
class User
{
public:
    string username;
    string password; // Lưu dạng băm
    string fullName;
    int points;
    string userID;
    bool isAutoGenerated;

    User(string uname, string pwd, string fname, bool autoGen = false, int pts = 0)
    {
        username = uname;
        password = hashPassword(pwd);
        fullName = fname;
        points = pts;
        userID = generateUserID();
        isAutoGenerated = autoGen;
    }

    void display()
    {
        cout << "ID: " << userID << ", Username: " << username
             << ", Full Name: " << fullName << ", Points: " << points << endl;
    }

    string hashPassword(string pwd)
    {
        return pwd + "_hashed"; // Giả lập băm
    }

private:
    string generateUserID()
    {
        return "UID" + to_string(rand() % 10000);
    }
};

// Sinh mật khẩu ngẫu nhiên
string generatePassword()
{
    string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string pwd;
    for (int i = 0; i < 8; i++)
    {
        pwd += chars[rand() % chars.length()];
    }
    return pwd;
}

// Lưu dữ liệu vào file
void saveUsers(const vector<User> &users)
{
    ofstream file("users.txt");
    if (file.is_open())
    {
        for (const auto &user : users)
        {
            file << user.userID << "|" << user.username << "|"
                 << user.password << "|" << user.fullName << "|"
                 << user.points << "|" << user.isAutoGenerated << endl;
        }
        file.close();
        // system("copy users.txt users_backup.txt"); // Windows
        system("cp users.txt users_backup.txt"); // Linux/MacOS
        cout << "Saved and backed up successfully!" << endl;
    }
    else
    {
        cout << "Error saving file!" << endl;
    }
}

// Đọc dữ liệu từ file
vector<User> loadUsers()
{
    vector<User> users;
    ifstream file("users.txt");
    if (!file.is_open())
    {
        cout << "No existing user file found, starting fresh." << endl;
        return users;
    }

    string line;
    while (getline(file, line))
    {
        string userID, username, password, fullName, pointsStr, autoGenStr;
        size_t pos = 0;
        pos = line.find("|");
        userID = line.substr(0, pos);
        line.erase(0, pos + 1);
        pos = line.find("|");
        username = line.substr(0, pos);
        line.erase(0, pos + 1);
        pos = line.find("|");
        password = line.substr(0, pos);
        line.erase(0, pos + 1);
        pos = line.find("|");
        fullName = line.substr(0, pos);
        line.erase(0, pos + 1);
        pos = line.find("|");
        pointsStr = line.substr(0, pos);
        line.erase(0, pos + 1);
        autoGenStr = line;
        bool isAutoGen = (autoGenStr == "1");
        User user(username, password, fullName, isAutoGen, stoi(pointsStr));
        user.password = password;
        user.userID = userID;
        users.push_back(user);
    }
    file.close();
    return users;
}

// Đăng ký tài khoản
void registerUser(vector<User> &users, bool isAdmin = false)
{
    string username, password, fullName;
    cout << "Enter username: ";
    cin >> username;
    for (const auto &user : users)
    {
        if (user.username == username)
        {
            cout << "Username already exists!" << endl;
            return;
        }
    }
    cout << "Enter full name: ";
    cin.ignore();
    getline(cin, fullName);

    if (!isAdmin)
    {
        password = generatePassword();
        cout << "Auto-generated password: " << password << endl;
        cout << "Please note this password. You will be required to change it on first login." << endl;
    }
    else
    {
        cout << "Enter password: ";
        cin >> password;
    }

    User newUser(username, password, fullName, !isAdmin);
    users.push_back(newUser);
    saveUsers(users);
    cout << "User registered successfully!" << endl;
    newUser.display();
}

// Thay đổi mật khẩu
void changePassword(vector<User> &users, User *currentUser)
{
    string newPassword;
    cout << "Enter new password: ";
    cin >> newPassword;
    currentUser->password = currentUser->hashPassword(newPassword);
    currentUser->isAutoGenerated = false;
    saveUsers(users);
    cout << "Password changed successfully!" << endl;
}

// Sinh và xác nhận OTP
bool verifyOTP(string changes)
{
    char base32_secret[] = "JBSWY3DPEHPK3PXP";
    OTPData *data = nullptr;
    COTP::OTP otp(data, base32_secret, nullptr, 6);

    // Sinh OTP với input là thời gian hiện tại (giả lập)
    char otp_output[7];                      // Buffer cho 6 chữ số + null terminator
    otp.generate(time(nullptr), otp_output); // Dùng thời gian hiện tại làm input
    string generatedOTP = string(otp_output);

    cout << "OTP sent to your account: " << generatedOTP << endl; // Giả lập gửi OTP
    cout << "Changes requested: " << changes << endl;
    cout << "Enter OTP to confirm: ";
    string userOTP;
    cin >> userOTP;
    return userOTP == generatedOTP;
}

// Cập nhật thông tin cá nhân
void updateProfile(vector<User> &users, User *currentUser)
{
    cout << "Current profile:\n";
    currentUser->display();
    cout << "Enter new full name (or press Enter to keep current): ";
    string newFullName;
    cin.ignore();
    getline(cin, newFullName);
    string newPassword;
    cout << "Enter new password (or press Enter to keep current): ";
    getline(cin, newPassword);

    // Chuẩn bị thông báo thay đổi
    string changes = "";
    if (!newFullName.empty())
        changes += "Full Name: " + newFullName;
    if (!newPassword.empty())
    {
        if (!changes.empty())
            changes += ", ";
        changes += "Password: [hidden]";
    }
    if (changes.empty())
    {
        cout << "No changes requested!" << endl;
        return;
    }

    // Xác nhận bằng OTP
    if (verifyOTP(changes))
    {
        if (!newFullName.empty())
            currentUser->fullName = newFullName;
        if (!newPassword.empty())
            currentUser->password = currentUser->hashPassword(newPassword);
        saveUsers(users);
        cout << "Profile updated successfully!" << endl;
        currentUser->display();
    }
    else
    {
        cout << "Invalid OTP! Changes discarded." << endl;
    }
}

// Đăng nhập
User *login(vector<User> &users)
{
    string username, password;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;
    for (auto &user : users)
    {
        string hashedInput = user.hashPassword(password);
        if (user.username == username && user.password == hashedInput)
        {
            cout << "Login successful! Welcome, " << user.fullName << endl;
            user.display();
            if (user.isAutoGenerated)
            {
                cout << "This is your first login with an auto-generated password.\n";
                cout << "You must change your password now.\n";
                changePassword(users, &user);
            }
            return &user;
        }
    }
    cout << "Invalid username or password!" << endl;
    return nullptr;
}

// Chuyển điểm giữa các ví
void transferPoints(vector<User> &users, User *currentUser)
{
    string toUsername;
    int amount;
    cout << "Enter username to transfer points to: ";
    cin >> toUsername;
    cout << "Enter amount to transfer: ";
    cin >> amount;

    if (amount <= 0 || amount > currentUser->points)
    {
        cout << "Invalid amount or insufficient points!" << endl;
        return;
    }

    for (auto &user : users)
    {
        if (user.username == toUsername)
        {
            currentUser->points -= amount;
            user.points += amount;
            saveUsers(users);
            cout << "Transferred " << amount << " points to " << toUsername << endl;
            currentUser->display();
            user.display();
            return;
        }
    }
    cout << "Recipient username not found!" << endl;
}

int main()
{
    srand(time(0));
    vector<User> users = loadUsers();
    int choice;
    User *loggedInUser = nullptr;

    while (true)
    {
        if (loggedInUser == nullptr)
        {
            cout << "\n1. Register (User)\n2. Register (Admin)\n3. Login\n4. Exit\nChoice: ";
            cin >> choice;
            switch (choice)
            {
            case 1:
                registerUser(users, false);
                break;
            case 2:
                registerUser(users, true);
                break;
            case 3:
                loggedInUser = login(users);
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice!" << endl;
            }
        }
        else
        {
            cout << "\n1. Transfer Points\n2. Change Password\n3. Update Profile\n4. Logout\nChoice: ";
            cin >> choice;
            switch (choice)
            {
            case 1:
                transferPoints(users, loggedInUser);
                break;
            case 2:
                changePassword(users, loggedInUser);
                break;
            case 3:
                updateProfile(users, loggedInUser);
                break;
            case 4:
                loggedInUser = nullptr;
                cout << "Logged out!" << endl;
                break;
            default:
                cout << "Invalid choice!" << endl;
            }
        }
    }
    return 0;
}