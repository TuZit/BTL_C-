#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <ctime>
#include <cstdlib>
#include <limits>
#include "otp.h"
#include "otp.cpp"

#include "json.hpp"
using json = nlohmann::json;

const int MAX_USERS = 100;
using namespace std;

enum Role
{
    ADMIN,
    USER
};

/**
 * Định nghĩa class Wallet đại diện cho một ví điện tử của người dùng.
 *
 * Mỗi ví có ID, tên và số dư. Hỗ trợ tạo ví mới và hiển thị thông tin ví.
 */
class Wallet
{
public:
    string walletID;
    string walletName;
    int balance;

    /**
     * Khởi tạo một ví mới với tên và số dư ban đầu.
     * @param name Tên ví
     * @param initialBalance Số dư khởi tạo (mặc định 0)
     */
    Wallet(string name, int initialBalance = 0)
    {
        walletID = generateWalletID();
        walletName = name;
        balance = initialBalance;
    }

    /**
     * Hiển thị thông tin ví ra màn hình.
     */
    void display() const
    {
        cout << "       Wallet ID: " << walletID << ", Name: " << walletName
             << ", Balance: " << balance << endl;
    }

private:
    /**
     * Sinh mã ví ngẫu nhiên.
     * @return Chuỗi mã ví
     */
    string generateWalletID()
    {
        return "WID" + to_string(rand() % 10000);
    }
};

/**
 * Định nghĩa class Transaction đại diện cho một giao dịch chuyển điểm.
 *
 * Lưu thông tin ví nguồn, ví đích, số điểm và thời gian giao dịch.
 */
class Transaction
{
public:
    string fromWalletID;
    string toWalletID;
    int amount;
    string timestamp;

    /**
     * Khởi tạo một giao dịch mới.
     * @param fromID Ví nguồn
     * @param toID Ví đích
     * @param amt Số điểm chuyển
     */
    Transaction(string fromID, string toID, int amt)
    {
        fromWalletID = fromID;
        toWalletID = toID;
        amount = amt;
        timestamp = generateTimestamp();
    }

    /**
     * Hiển thị thông tin giao dịch ra màn hình.
     */
    void display() const
    {
        cout << "From: " << fromWalletID << ", To: " << toWalletID
             << ", Amount: " << amount << ", Timestamp: " << timestamp << endl;
    }

private:
    /**
     * Sinh chuỗi thời gian hiện tại.
     * @return Chuỗi thời gian
     */
    string generateTimestamp()
    {
        time_t now = time(0);
        char *dt = ctime(&now);
        return string(dt);
    }
};

/**
 * Định nghĩa class User đại diện cho một người dùng hệ thống.
 *
 * Lưu thông tin tài khoản, ví, giao dịch, vai trò và trạng thái mật khẩu.
 */
class User
{
public:
    string username;
    string password;
    string fullName;
    int points;
    string userID;
    bool isAutoGenerated;
    Role role;
    vector<Wallet> wallets;
    vector<Transaction> transactions;
    bool isHashed;

    /**
     * Khởi tạo một user mới.
     * @param uname Tên đăng nhập
     * @param pwd Mật khẩu (có thể đã hash)
     * @param fname Họ tên
     * @param userRole Vai trò
     * @param autoGen Có phải mật khẩu tự động không
     * @param pts Số điểm ban đầu
     * @param isHashed_ Mật khẩu đã hash chưa
     */
    User(string uname, string pwd, string fname, Role userRole = USER, bool autoGen = false, int pts = 10, bool isHashed_ = true)
    {
        isHashed = isHashed_;
        username = uname;
        password = isHashed ? pwd : hashPassword(pwd);
        fullName = fname;
        points = pts;
        userID = generateUserID();
        isAutoGenerated = autoGen;
        role = userRole;

        wallets.push_back(Wallet("Main Wallet", pts));
    }

    /**
     * Hiển thị thông tin user ra màn hình.
     */
    void display() const
    {
        cout << "ID: " << userID << ", Username: " << username
             << ", Full Name: " << fullName << ", Points: " << points
             << ", Role: " << (role == ADMIN ? "Admin" : "User") << endl;
        cout << "   Wallets:\n";
        for (const auto &wallet : wallets)
        {
            wallet.display();
        }
    }

    /**
     * Hàm giả lập băm mật khẩu.
     * @param pwd Mật khẩu gốc
     * @return Chuỗi mật khẩu đã băm
     */
    string hashPassword(string pwd)
    {
        return pwd + "_hashed"; // Giả lập băm
    }

private:
    /**
     * Sinh mã người dùng ngẫu nhiên.
     * @return Chuỗi mã user
     */
    string generateUserID()
    {
        return "UID" + to_string(rand() % 10000);
    }
};

/**
 * Sinh mật khẩu ngẫu nhiên gồm 8 ký tự.
 * @return Chuỗi mật khẩu ngẫu nhiên
 */
string generatePassword()
{
    string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string pwd;
    for (int i = 0; i < 8; i++)
    {
        pwd += chars[rand() % chars.length()];
    }
    return pwd;
}

/**
 * Lưu toàn bộ danh sách user vào file users.json.
 *
 * @param users Danh sách user cần lưu
 */
void saveUsers(const vector<User> &users)
{
    json jsonData;

    for (const auto &user : users)
    {
        json userJson;
        userJson["userID"] = user.userID;
        userJson["username"] = user.username;
        userJson["password"] = user.password;
        userJson["fullName"] = user.fullName;
        userJson["points"] = user.points;
        userJson["isAutoGenerated"] = user.isAutoGenerated;
        userJson["role"] = (user.role == ADMIN ? "ADMIN" : "USER");
        userJson["isHashed"] = true;

        // Lưu danh sách ví
        for (const auto &wallet : user.wallets)
        {
            json walletJson;
            walletJson["walletID"] = wallet.walletID;
            walletJson["walletName"] = wallet.walletName;
            walletJson["balance"] = wallet.balance;
            userJson["wallets"].push_back(walletJson);
        }

        // Lưu danh sách giao dịch
        for (const auto &transaction : user.transactions)
        {
            json transactionJson;
            transactionJson["fromWalletID"] = transaction.fromWalletID;
            transactionJson["toWalletID"] = transaction.toWalletID;
            transactionJson["amount"] = transaction.amount;
            transactionJson["timestamp"] = transaction.timestamp;
            userJson["transactions"].push_back(transactionJson);
        }

        jsonData["users"].push_back(userJson);
    }

    // Ghi dữ liệu JSON vào file
    ofstream file("users.json");
    if (file.is_open())
    {
        file << jsonData.dump(4); // Lưu với định dạng indent = 4 spaces
        file.close();
        cout << "Data saved to users.json successfully!" << endl;
    }
    else
    {
        cout << "Error saving to users.json!" << endl;
    }
}

/**
 * Đọc danh sách user từ file users.json.
 *
 * @return Danh sách user đã đọc từ file
 */
vector<User> loadUsers()
{
    vector<User> users;
    ifstream file("users.json");
    if (!file.is_open())
    {
        cout << "No existing user file found, starting fresh." << endl;
        return users;
    }

    json jsonData;
    file >> jsonData;

    for (const auto &userJson : jsonData["users"])
    {
        User user(
            userJson["username"].get<string>(),
            userJson["password"].get<string>(),
            userJson["fullName"].get<string>(),
            userJson["role"].get<string>() == "ADMIN" ? ADMIN : USER,
            userJson["isAutoGenerated"].get<bool>(),
            userJson["points"].get<int>(),
            userJson.contains("isHashed") ? userJson["isHashed"].get<bool>() : false);

        user.userID = userJson["userID"].get<string>();

        // Đọc danh sách ví
        // Đọc danh sách ví
        if (userJson.contains("wallets"))
        {
            for (const auto &walletJson : userJson["wallets"])
            {
                Wallet wallet(walletJson["walletName"].get<string>(), walletJson["balance"].get<int>());
                wallet.walletID = walletJson["walletID"].get<string>();
                user.wallets.push_back(wallet);
            }
        }

        // Đọc danh sách giao dịch
        if (userJson.contains("transactions"))
        {
            for (const auto &transactionJson : userJson["transactions"])
            {
                Transaction transaction(
                    transactionJson["fromWalletID"].get<string>(),
                    transactionJson["toWalletID"].get<string>(),
                    transactionJson["amount"].get<int>());
                transaction.timestamp = transactionJson["timestamp"].get<string>();
                user.transactions.push_back(transaction);
            }
        }

        users.push_back(user);
    }

    file.close();
    return users;
}

/**
 * Đăng ký tài khoản mới (user hoặc admin).
 *
 * @param users Danh sách user hiện tại (tham chiếu)
 * @param isAdmin Đăng ký admin hay user thường (mặc định là user)
 */
void registerUser(vector<User> &users, bool isAdmin = false)
{
    string username, password, fullName;
    cout << "Enter username: ";
    cin >> username;
    for (const auto &user : users)
    {
        if (user.username == username)
        {
            cout << "Username already exists!" << endl;
            return;
        }
    }
    cout << "Enter full name: ";
    cin.ignore();
    getline(cin, fullName);

    Role role = isAdmin ? ADMIN : USER;

    // Nếu không phải admin, tạo mật khẩu tự động
    if (!isAdmin)
    {
        password = generatePassword();
        cout << "Auto-generated password: " << password << endl;
        cout << "Please note this password. You will be required to change it on first login." << endl;
    }
    else
    {
        cout << "Enter password: ";
        cin >> password;
    }

    User newUser(username, password, fullName, role, !isAdmin);
    users.push_back(newUser);
    saveUsers(users);
    cout << "User registered successfully!" << endl;
    newUser.display();
}

/**
 * Đổi mật khẩu cho user hiện tại.
 *
 * @param users Danh sách user (tham chiếu)
 * @param currentUser Con trỏ tới user hiện tại
 */
void changePassword(vector<User> &users, User *currentUser)
{
    string newPassword;
    cout << "Enter new password: ";
    cin >> newPassword;
    currentUser->password = currentUser->hashPassword(newPassword);
    currentUser->isAutoGenerated = false;
    currentUser->isHashed = true;
    saveUsers(users);
    cout << "Password changed successfully!" << endl;
}

/**
 * Cập nhật thông tin cá nhân (tên, mật khẩu) của user.
 *
 * @param users Danh sách user (tham chiếu)
 * @param currentUser Con trỏ tới user hiện tại
 */
void updateProfile(vector<User> &users, User *currentUser)
{
    cout << "Current profile:\n";
    currentUser->display();
    cout << "Enter new full name (or press Enter to keep current): ";
    string newFullName;
    cin.ignore();
    getline(cin, newFullName);
    string newPassword;
    cout << "Enter new password (or press Enter to keep current): ";
    getline(cin, newPassword);

    // Chuẩn bị thông báo thay đổi
    string changes = "";
    if (!newFullName.empty())
        changes += "Full Name: " + newFullName;
    if (!newPassword.empty())
    {
        if (!changes.empty())
            changes += ", ";
        changes += "Password: [hidden]";
    }
    if (changes.empty())
    {
        cout << "No changes requested!" << endl;
        return;
    }

    // Xác nhận bằng OTP
    if (verifyOTP(changes))
    {
        if (!newFullName.empty())
            currentUser->fullName = newFullName;
        if (!newPassword.empty())
            currentUser->password = currentUser->hashPassword(newPassword);
        saveUsers(users);
        cout << "Profile updated successfully!" << endl;
        currentUser->display();
    }
    else
    {
        cout << "Invalid OTP! Changes discarded." << endl;
    }
}

/**
 * Hiển thị thông tin chi tiết của user.
 *
 * @param user Con trỏ tới user cần xem
 */
void viewProfile(const User *user)
{
    cout << "===== User Profile =====" << endl;
    cout << "Full Name: " << user->fullName << endl;
    cout << "Username: " << user->username << endl;
    cout << "Points: " << user->points << endl;
    cout << "User ID: " << user->userID << endl;
    cout << "Role: " << (user->role == ADMIN ? "Admin" : "User") << endl;
    cout << "Wallets:" << endl;
    for (const auto &wallet : user->wallets)
    {
        cout << "  - Wallet ID: " << wallet.walletID
             << ", Name: " << wallet.walletName
             << ", Balance: " << wallet.balance << endl;
    }
    cout << "Number of Transactions: " << user->transactions.size() << endl;
    if (!user->transactions.empty())
    {
        cout << "Transactions:" << endl;
        for (const auto &t : user->transactions)
        {
            cout << "  - From: " << t.fromWalletID
                 << ", To: " << t.toWalletID
                 << ", Amount: " << t.amount
                 << ", Time: " << t.timestamp << endl;
        }
    }
    cout << "=======================" << endl;
}

/**
 * Đăng nhập hệ thống.
 *
 * @param users Danh sách user (tham chiếu)
 * @return Con trỏ tới user nếu đăng nhập thành công, nullptr nếu thất bại
 */
User *login(vector<User> &users)
{
    string username, password;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;
    for (auto &user : users)
    {
        string hashedInput = user.isHashed ? user.hashPassword(password) : password;
        if (user.username == username && user.password == (user.isHashed ? hashedInput : password))
        {
            cout << "Login successful! Welcome, " << user.fullName << endl;
            user.display();
            // Nếu user chưa hash, hash lại password và cập nhật isHashed
            if (!user.isHashed)
            {
                user.password = user.hashPassword(password);
                user.isHashed = true;
                saveUsers(users);
                cout << "Your password has been secured. Please use your password as usual next time.\n";
            }
            if (user.isAutoGenerated)
            {
                cout << "This is your first login with an auto-generated password.\n";
                cout << "You must change your password now.\n";
                changePassword(users, &user);
            }
            return &user;
        }
    }
    cout << "Invalid username or password!" << endl;
    return nullptr;
}

/**
 * Hiển thị danh sách tất cả user (dành cho admin).
 *
 * @param users Danh sách user
 */
void viewUserList(const vector<User> &users)
{
    cout << "User List:\n";
    for (const auto &user : users)
    {
        user.display();
    }
}

/**
 * Admin tạo tài khoản user mới.
 *
 * @param users Danh sách user (tham chiếu)
 */
void createNewAccount(vector<User> &users)
{
    cout << "Admin: Creating a new account.\n";
    registerUser(users, false);
}

/**
 * Admin chỉnh sửa thông tin user.
 *
 * @param users Danh sách user (tham chiếu)
 */
void adjustUserInfo(vector<User> &users)
{
    string username;
    cout << "Enter the username of the account to adjust: ";
    cin >> username;

    for (auto &user : users)
    {
        if (user.username == username)
        {
            cout << "Current information:\n";
            user.display();

            string newFullName, newPassword;
            cout << "Enter new full name (or press Enter to keep current): ";
            cin.ignore();
            getline(cin, newFullName);
            cout << "Enter new password (or press Enter to keep current): ";
            getline(cin, newPassword);

            string changes = "";
            if (!newFullName.empty())
            {
                changes += "Full Name: " + newFullName;
            }
            if (!newPassword.empty())
            {
                if (!changes.empty())
                    changes += ", ";
                changes += "Password: [hidden]";
            }

            if (changes.empty())
            {
                cout << "No changes requested!" << endl;
                return;
            }

            // Gửi OTP để xác nhận
            if (verifyOTP(changes))
            {
                if (!newFullName.empty())
                    user.fullName = newFullName;
                if (!newPassword.empty())
                    user.password = user.hashPassword(newPassword);

                saveUsers(users);
                cout << "Account information updated successfully!" << endl;
                user.display();
            }
            else
            {
                cout << "Invalid OTP! Changes discarded." << endl;
            }
            return;
        }
    }
    cout << "Username not found!" << endl;
}

/**
 * Chuyển điểm giữa hai ví bất kỳ.
 *
 * @param users Danh sách user (tham chiếu)
 * @param fromWalletID ID ví nguồn
 * @param toWalletID ID ví đích
 * @param amount Số điểm chuyển
 */
void transferPointsBetweenWallets(vector<User> &users, const string &fromWalletID, const string &toWalletID, int amount)
{
    Wallet *fromWallet = nullptr;
    Wallet *toWallet = nullptr;
    User *fromUser = nullptr;
    User *toUser = nullptr;

    // Tìm ví nguồn (A) và người dùng sở hữu ví
    for (auto &user : users)
    {
        for (auto &wallet : user.wallets)
        {
            if (wallet.walletID == fromWalletID)
            {
                fromWallet = &wallet;
                fromUser = &user;
                break;
            }
        }
        if (fromWallet)
            break;
    }

    // Tìm ví đích (B) và người dùng sở hữu ví
    for (auto &user : users)
    {
        for (auto &wallet : user.wallets)
        {
            if (wallet.walletID == toWalletID)
            {
                toWallet = &wallet;
                toUser = &user;
                break;
            }
        }
        if (toWallet)
            break;
    }

    // Kiểm tra sự tồn tại của ví nguồn và ví đích
    if (!fromWallet)
    {
        cout << "Source wallet not found!" << endl;
        return;
    }
    if (!toWallet)
    {
        cout << "Destination wallet not found!" << endl;
        return;
    }

    // Kiểm tra số dư của ví nguồn
    if (fromWallet->balance < amount)
    {
        cout << "Low balance. Cannot proceed." << endl;
        return;
    }

    // Giao dịch
    try
    {
        // Trừ số dư từ ví nguồn
        fromWallet->balance -= amount;

        // Cộng số dư vào ví đích
        toWallet->balance += amount;

        // Lưu giao dịch vào lịch sử của cả hai người dùng
        fromUser->transactions.push_back(Transaction(fromWalletID, toWalletID, amount));
        toUser->transactions.push_back(Transaction(fromWalletID, toWalletID, amount));

        // Ghi lại lịch sử giao dịch vào file JSON
        saveUsers(users);

        cout << "Transaction successful!" << endl;
    }
    catch (...)
    {
        // Phục hồi trạng thái nếu có lỗi xảy ra
        fromWallet->balance += amount;
        toWallet->balance -= amount;
        cout << "Transaction failed. State restored." << endl;
    }
}

/**
 * Hiển thị lịch sử giao dịch của user.
 *
 * @param user User cần xem lịch sử
 */
void viewTransactionHistory(const User &user)
{
    if (user.transactions.empty())
    {
        cout << "You have no transactions yet\n";
        return;
    }
    cout << "Transaction History:\n";
    for (const auto &transaction : user.transactions)
    {
        transaction.display();
    }
}

/**
 * Tạo ví mới cho user.
 *
 * @param user User cần tạo ví (tham chiếu)
 * @param walletName Tên ví mới
 */
void createWallet(User &user, const string &walletName)
{
    user.wallets.push_back(Wallet(walletName));
    cout << "Wallet created successfully!" << endl;
}

/**
 * Hàm main: giao diện menu, điều phối các chức năng chính của chương trình.
 *
 * Nhận input từ bàn phím, gọi các hàm xử lý tương ứng.
 * @return 0 nếu kết thúc chương trình
 */
int main()
{
    srand(time(0));
    vector<User> users = loadUsers();
    int choice;
    User *loggedInUser = nullptr;

    while (true)
    {
        if (loggedInUser == nullptr)
        {
            cout << endl
                 << "1. Register (User)" << endl
                 << "2. Register (Admin)" << endl
                 << "3. Login" << endl
                 << "4. Exit" << endl
                 << "Choice: ";
            cin >> choice;

            // Kiểm tra lỗi nhập
            if (cin.fail())
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Invalid input! Please enter a number." << endl;
                continue; // Quay lại vòng lặp
            }

            switch (choice)
            {
            case 1:
                registerUser(users, false);
                break;
            case 2:
                registerUser(users, true);
                break;
            case 3:
                loggedInUser = login(users);
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice! Please select a valid option." << endl;
            }
        }
        else if (loggedInUser->role == ADMIN)
        {
            cout << endl
                 << "1. View User List" << endl
                 << "2. Create New Account" << endl
                 << "3. Adjust User Info" << endl
                 << "4. Logout" << endl
                 << "Choice: ";
            cin >> choice;

            if (cin.fail())
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Invalid input! Please enter a number." << endl;
                continue;
            }

            switch (choice)
            {
            case 1:
                viewUserList(users);
                break;
            case 2:
                createNewAccount(users);
                break;
            case 3:
                adjustUserInfo(users);
                break;
            case 4:
                loggedInUser = nullptr;
                cout << "Logged out!" << endl;
                break;
            default:
                cout << "Invalid choice! Please select a valid option." << endl;
            }
        }
        else
        {
            cout << "1. Transfer Points" << endl
                 << "2. Change Password" << endl
                 << "3. Update Profile" << endl
                 << "4. Create Wallet" << endl
                 << "5. Your Profile" << endl
                 << "6. View Transaction History" << endl
                 << "7. Logout" << endl
                 << "Choice: ";
            cin >> choice;

            if (cin.fail())
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Invalid input! Please enter a number." << endl;
                continue;
            }

            switch (choice)
            {
            case 1:
            {
                string fromWalletID, toWalletID;
                int amount;
                cout << "Enter source wallet ID: ";
                cin >> fromWalletID;
                cout << "Enter destination wallet ID: ";
                cin >> toWalletID;
                cout << "Enter amount to transfer: ";
                cin >> amount;
                transferPointsBetweenWallets(users, fromWalletID, toWalletID, amount);
            }
            break;
            case 2:
                changePassword(users, loggedInUser);
                break;
            case 3:
                updateProfile(users, loggedInUser);
                break;
            case 4:
            {
                string walletName;
                cout << "Enter wallet name: ";
                cin.ignore();
                getline(cin, walletName);
                createWallet(*loggedInUser, walletName);
            }
            break;
            case 5:
                viewProfile(loggedInUser);
                break;
            case 6:
                viewTransactionHistory(*loggedInUser);
                break;
            case 7:
                loggedInUser = nullptr;
                cout << "Logged out!" << endl;
                break;
            default:
                cout << "Invalid choice! Please select a valid option." << endl;
            }
        }
    }
    return 0;
}